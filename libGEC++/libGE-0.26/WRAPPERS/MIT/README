GE_MITGALIB
===========

This directory contains the GE_MITGALIB wrapper. This wrapper allows you to use
the GAlib (genetic algorithm library) code from the MIT Institute with libGE
(make sure to check the project's website, http://lancet.mit.edu/ga/)

Contents
========

This wrapper is composed of two files, GE_MITGALIB.h and GE_MITGALIB.cpp. The
former contains the prototypes of the wrapper functions; the latter contains
the implementation of those functions. These functions make use of data
structures from the GAlib code (check copyright notice in AUTHORS), and
therefore the GAlib library must be installed in the system.
The functions available transform the given Genome structure into a 
Genotype structure (check src/Genotype.h), and assign that Genotype to the
given Mapper object (check src/Mapper.h).

Installation
============

The wrapper is installed by default with libGE. An option to the 'configure'
script allows you to specify if the wrapper should be installed or not:

./configure --enable-GE_MITGALIB[=yes/no]

If ommited, or if the option yes/no is ommited, the wrapper will be installed.
Additionally, two other options to the 'configure' script allow you to specify
where the GAlib headers and library are installed. These are:

--with-MITGALIBINCLUDES[=path]
--with-MITGALIBLIBS[=path]

If ommited, or if the option =path is ommited, the headers will be refered to
as #include<ga/ga.h>, and the library will be called through the C++ linker
option -lga. If a local install of GAlib was performed on your system, use the
path argument to point to the full path of the installation. Example:

./configure --with-MITGALIBINCLUDES=/home/user/galib245/include \
            --with-MITGALIBLIBS=/home/user/galib245/lib/libga.a

This will cause libGE to add the '-I/home/user/galib245/include' flag to the
compiler, when compiling the GE_MITGALIB wrapper.

Usage
=====

Before calling the evolve() function on GAlib, you must initialise the libGE
interface. This can be done with code similar to the following:

static CFGrammar mapper;
mapper.setMaxWraps(10); /* Set maximum number of wrap events to 10 */
ifstream code("grammar.bnf");
if (!mapper.readBNF(code)){
	cerr << "Call to readBNF failed\n";
	cerr << "Execution aborted.\n";
	exit(0);
}

These functions are self-explanatory. In your objective function, code similar
to the following should be used:

#include<ga/ga.h>
#include<GE/CFGrammar.h>
#include <GE/GE_MITGALIB.h>

float objfunc(GAGenome &g){
	GAListGenome<unsigned char> &genome = (GAListGenome<unsigned char> &) g;
	GE_MITGALIB_AssignGenotype(mapper,genome);
        Phenotype const *phenotype=mapper.getPhenotype();
	if(phenotype->getValid()){
		// Evaluate phenotype contained in phenotype structure
	}
	else
		return 0;
  }

The cast used in the first line should be chosen according to the kind of
structure you are currently using as genome (check MIT/GE_MITGALIB.h for
available wrappers). The mapper object is the previously defined static object,
and should therefore be available (e.g. as a global variable). Check the files
src/Phenotype.h and src/Mapper.h for more information about these classes.

The order of the includes is vital. The wrapper code will fail to compile if
the GAlib headers have not been yet included. This allows you to change the
location of your GAlib headers after installing libGE, without having to
re-configure your libGE installation.

Finally, do not forget to assign this objective function to your genome, using
code similar to the following:

GAListGenome<unsigned char> genome(objfunc);

For more information about the GAlib structures and algorithms, make sure to
check their documentation.

To build the GAlib code, compile all files as normal. To link to the libGE
library, use the -lGE linker flag with your C++ compiler; alternatively, on the
case of a local installation, provide the full path of your libGE installation
(e.g. /home/user/libGE/lib/libGE.a).


Please mail bugs/suggestions to miguel.nicolau@ul.ie.

