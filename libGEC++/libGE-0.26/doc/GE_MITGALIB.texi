@section GE_MITGALIB
@cindex GE_MITGALIB
@cindex MIT

(@b{WARNING}: this wrapper is now deprecated. It has been replaced by direct
manipulation of GALib objects within the @code{Mapper} class. Please check the
documentation for the @code{Mapper} interface (@pxref{Mapper}).)

This wrapper allows you to use the GAlib (genetic algorithm library) code from
the MIT Institute with libGE (make sure to check the project's website,
@url{http://lancet.mit.edu/ga/}).

@subsection Contents

This wrapper is composed of two files, @file{GE_MITGALIB.h} and
@file{GE_MITGALIB.cpp}. The former contains the prototypes of the wrapper
functions; the latter contains the implementation of those functions. These
functions make use of data structures from the GAlib code (check copyright
notice in the file @file{AUTHORS}), and therefore the GAlib library must be
installed in the system. The functions available transform the given
@code{Genome} structure into a @code{Genotype} structure (@pxref{Genotype}),
and assign that @code{Genotype} to the given @code{Mapper} object
(@pxref{Mapper}).

@subsection Installation

The wrapper is installed by default with libGE. An option to the
@file{configure} script allows you to specify if the wrapper should be
installed or not:

@kbd{./configure --enable-GE_MITGALIB[=yes/no]}

If ommited, or if the option @kbd{yes/no} is ommited, the wrapper will be
installed.
Additionally, two other options to the @file{configure} script allow you to
specify where the GAlib headers and library are installed. These are:

@kbd{--with-MITGALIBINCLUDES[=path]}

@kbd{--with-MITGALIBLIBS[=path]}

If ommited, or if the option @kbd{path} is ommited, the headers will be refered
to as @code{#include<ga/ga.h>}, and the library will be called through the C++
linker option @kbd{-lga}. If a local install of GAlib was performed on your
system, use the path argument to point to the full path of the installation.
Example:

@example
./configure --with-MITGALIBINCLUDES=/home/user/galib245/include \
            --with-MITGALIBLIBS=/home/user/galib245/lib/libga.a
@end example

This will cause libGE to add the @kbd{-I/home/user/galib245/include} flag to
the compiler, when compiling the GE_MITGALIB wrapper.

@subsection Usage

Before calling the @code{evolve()} function on GAlib, you must initialise the
libGE interface. This can be done with code similar to the following:

@example
static GEGrammar mapper;
mapper.setMaxWraps(10); /* Set maximum number of wrap events to 10 */
if (!mapper.readBNFFile("grammar.bnf"))@{
        cerr << "Could not read grammar.bnf\n";
        cerr << "Execution aborted.\n";
        exit(0);
@}
@end example

These functions are self-explanatory. In your objective function, code similar
to the following should be used:

@example
#include<ga/ga.h>
#include<GE/ge.h>

float objfunc(GAGenome &g)@{
        GAListGenome<unsigned char> &genome =
	        (GAListGenome<unsigned char> &) g;
        GE_MITGALIB_AssignGenotype(mapper,genome);
        Phenotype const *phenotype=mapper.getPhenotype();
        if(phenotype->getValid())@{
                // Evaluate phenotype and return fitness
        @}
        else
                return 0;
@}
@end example

The cast used in the first line should be chosen according to the kind of
structure you are currently using as genome (check @file{MIT/GE_MITGALIB.h} for
available wrappers). The mapper object is the previously defined static object,
and should therefore be available (e.g. as a global variable).

Finally, do not forget to assign this objective function to your genome, using
code similar to the following:

@code{GAListGenome<unsigned char> genome(objfunc);}

For more information about the GAlib structures and algorithms, make sure to
check their documentation.

To build the GAlib code, compile all files as normal. To link to the libGE
library, use the @kbd{-lGE} linker flag with your C++ compiler; alternatively,
on the case of a local installation, provide the full path of your libGE
installation (e.g. @file{/home/user/libGE/lib/libGE.a}).

